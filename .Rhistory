nB <- 10
# Caution: the bins should be consistent across all images!
rBin <- seq(0, 1, length.out=nR)
gBin <- seq(0, 1, length.out=nG)
bBin <- seq(0, 1, length.out=nB)
freq_rgb <- as.data.frame(table(factor(findInterval(mat[,,1], rBin), levels=1:nR),
factor(findInterval(mat[,,2], gBin), levels=1:nG),
factor(findInterval(mat[,,3], bBin), levels=1:nB)))
rgb_feature <- as.numeric(freq_rgb$Freq)/(ncol(mat)*nrow(mat)) # normalization
save(rgb_feature, file=paste0("../data/features/", str_sub(file_names[i], 1, -5), ".RData"))
}
print("hi", 1)
print("hi", 1, 2)
for(i in 1:n_files){
tryCatch(
{
mat <- imageData(readImage(paste0(img_train_dir, file_names[i])))
},
error=function(cond) {
message(paste("You were at image ", file_names[i]))
#message("Here's the original error message:")
#message(cond)
# Choose a return value in case of error
return(NA)
}
)
nR <- 10
nG <- 8
nB <- 10
# Caution: the bins should be consistent across all images!
rBin <- seq(0, 1, length.out=nR)
gBin <- seq(0, 1, length.out=nG)
bBin <- seq(0, 1, length.out=nB)
freq_rgb <- as.data.frame(table(factor(findInterval(mat[,,1], rBin), levels=1:nR),
factor(findInterval(mat[,,2], gBin), levels=1:nG),
factor(findInterval(mat[,,3], bBin), levels=1:nB)))
rgb_feature <- as.numeric(freq_rgb$Freq)/(ncol(mat)*nrow(mat)) # normalization
save(rgb_feature, file=paste0("../data/features/", str_sub(file_names[i], 1, -5), ".RData"))
}
for(i in 1:n_files){
tryCatch(
{
mat <- imageData(readImage(paste0(img_train_dir, file_names[i])))
},
error=function(cond) {
message(paste("You were at image ", file_names[i]))
#message("Here's the original error message:")
#message(cond)
# Choose a return value in case of error
return(NA)
}
)
}
img_train_dir <- "../data/images/"
#img_test_dir <- "./data/zipcode_test/"
file_names <- dir(img_train_dir)
length(file_names)
train_label <- c()
for(i in 1:length(file_names)){
if (substring(file_names[i], 1, 1) == toupper(substring(file_names[1], 1, 1))){
# Cat = 1
train_label <- c(img_type, 1)
} else {
# Dog = 0
train_label <- c(img_type, 0)
}
}
train_label <- c()
for(i in 1:length(file_names)){
if (substring(file_names[i], 1, 1) == toupper(substring(file_names[1], 1, 1))){
# Cat = 1
train_label <- c(train_label, 1)
} else {
# Dog = 0
train_label <- c(train_label, 0)
}
}
length(train_label)
n_files <- length(list.files(img_dir))
n_files
for(i in 1:n_files){
tryCatch(
{
mat <- imageData(readImage(paste0(img_train_dir, file_names[i])))
},
error=function(cond) {
message(paste("You were at image ", file_names[i]))
#message("Here's the original error message:")
#message(cond)
# Choose a return value in case of error
return(NA)
}
)
}
file_names <- dir(img_train_dir)
length(file_names)
train_label <- c()
for(i in 1:length(file_names)){
if (substring(file_names[i], 1, 1) == toupper(substring(file_names[1], 1, 1))){
# Cat = 1
train_label <- c(train_label, 1)
} else {
# Dog = 0
train_label <- c(train_label, 0)
}
}
length(train_label)
n_files <- length(list.files(img_dir))
n_files
for(i in 1:n_files){
tryCatch(
{
mat <- imageData(readImage(paste0(img_train_dir, file_names[i])))
},
error=function(cond) {
message(paste("You were at image ", file_names[i]))
#message("Here's the original error message:")
#message(cond)
# Choose a return value in case of error
return(NA)
}
)
}
for(i in 1:n_files){
tryCatch(
{
mat <- imageData(readImage(paste0(img_train_dir, file_names[i])))
},
error=function(cond) {
message(paste("You were at image ", file_names[i]))
#message("Here's the original error message:")
#message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(paste("You were at image ", file_names[i]))
#message("Here's the original error message:")
#message(cond)
# Choose a return value in case of error
return(NA)
}
)
}
for(i in 1:n_files){
#  tryCatch(
#    {
mat <- imageData(readImage(paste0(img_train_dir, file_names[i])))
#    },
#    error=function(cond) {
#          message(paste("You were at image ", file_names[i]))
#          #message("Here's the original error message:")
#          #message(cond)
#          # Choose a return value in case of error
#          return(NA)
#    },
#    warning=function(cond) {
#          message(paste("You were at image ", file_names[i]))
#          #message("Here's the original error message:")
#          #message(cond)
#          # Choose a return value in case of error
#          return(NA)
#    }
#  )
#}
nR <- 10
nG <- 8
nB <- 10
# Caution: the bins should be consistent across all images!
rBin <- seq(0, 1, length.out=nR)
gBin <- seq(0, 1, length.out=nG)
bBin <- seq(0, 1, length.out=nB)
freq_rgb <- as.data.frame(table(factor(findInterval(mat[,,1], rBin), levels=1:nR),
factor(findInterval(mat[,,2], gBin), levels=1:nG),
factor(findInterval(mat[,,3], bBin), levels=1:nB)))
rgb_feature <- as.numeric(freq_rgb$Freq)/(ncol(mat)*nrow(mat)) # normalization
save(rgb_feature, file=paste0("../data/features/", str_sub(file_names[i], 1, -5), ".RData"))
}
length(dir("../data/features/"))
img_train_dir <- "../data/images2/"
#img_test_dir <- "./data/zipcode_test/"
file_names <- dir(img_train_dir)
length(file_names)
train_label <- c()
for(i in 1:length(file_names)){
if (substring(file_names[i], 1, 1) == toupper(substring(file_names[1], 1, 1))){
# Cat = 1
train_label <- c(train_label, 1)
} else {
# Dog = 0
train_label <- c(train_label, 0)
}
}
length(train_label)
baseline_feature_train <- system.time(feature(img_train_dir, 1))
source("lib/feature.R")
baseline_feature_train <- system.time(feature(img_train_dir, 1))
baseline_feature_train
length(dir("../data/features/"))
getwd()
img_train_dir
img_train_dir <- "../data/train/"
img_feature_dir <- "../data/features/"
img_feature_dir
list.files(img_feature_dir)
list.files(img_feature_dir)[1]
paste0(img_feature_dir)
paste0(img_feature_dir, list.files(feature_dir)[1])
paste0(img_feature_dir, list.files(img_feature_dir)[1])
getwd()
load(paste0(img_feature_dir, list.files(img_feature_dir)[1]))
load(paste0(img_feature_dir, list.files(img_feature_dir)[1]))
rm(freq_rgb)
load(paste0(img_feature_dir, list.files(img_feature_dir)[1]))
rm(rgb_feature)
load(paste0(img_feature_dir, list.files(img_feature_dir)[1]))
View(rgb_feature)
test<- load(paste0(img_feature_dir, list.files(img_feature_dir)[1]))
rm(rgb_feature)
View(test)
is.data.frame(load(paste0(img_feature_dir, list.files(img_feature_dir)[1])))
as.vector(load(paste0(img_feature_dir, list.files(img_feature_dir)[1])))
i=1
mat <- imageData(readImage(paste0(img_train_dir, list.files(img_dir)[i])))
nR <- 10
nG <- 8
nB <- 10
# Caution: the bins should be consistent across all images!
rBin <- seq(0, 1, length.out=nR)
gBin <- seq(0, 1, length.out=nG)
bBin <- seq(0, 1, length.out=nB)
freq_rgb <- as.data.frame(table(factor(findInterval(mat[,,1], rBin), levels=1:nR),
factor(findInterval(mat[,,2], gBin), levels=1:nG),
factor(findInterval(mat[,,3], bBin), levels=1:nB)))
as.numeric(freq_rgb$Freq)/(ncol(mat)*nrow(mat))
rgb_feature <- as.numeric(freq_rgb$Freq)/(ncol(mat)*nrow(mat)) # normalization
View(rgb_feature)
View(as.vector(rgb_feature))
matrix(ncol=8)
rbind(matrix(ncol=8), rgb_feature)
rbind(matrix(ncol=8), as.vector(rgb_feature))
str(rgb_feature)
rbind(matrix(ncol=800), rgb_feature)
View(rbind(matrix(ncol=800), rgb_feature))
matrix(nrow=0, ncol=5)
View(rbind(matrix(nrow=0, ncol=800), rgb_feature))
test<- rbind(matrix(nrow=0, ncol=800), rgb_feature)
test$row.names <- NULL
rownames(test) <- NULL
View(test)
test<- rbind(matrix(nrow=0, ncol=800), rgb_feature)
View(test)
rownames(test) <- NULL
View(test)
test<- rbind(test, as.numeric(freq_rgb$Freq)/(ncol(mat)*nrow(mat)))
View(test)
test <- matrix(nrow=0, ncol=800)
test<- rbind(test, as.numeric(freq_rgb$Freq)/(ncol(mat)*nrow(mat)))
View(test)
View(rgb_feature)
baseline_feature_train <- system.time(features <- feature(img_train_dir, img_feature_dir, 1))
source("lib/feature.R")
baseline_feature_train <- system.time(features <- feature(img_train_dir, img_feature_dir, 1))
baseline_feature_train
View(features)
baseline_features <- features
rm(features)
rm(rgb_features)
rm(rgb_feature)
rm(n_files)
rm(file_names)
baseline_train_time <- system.time(baseline_model<- train(baseline_features, train_label, 1))
source("./lib/train.R")
baseline_train_time <- system.time(baseline_model<- train(baseline_features, train_label, 1))
install.packages("caret")
baseline_train_time <- system.time(baseline_model<- train(baseline_features, train_label, 1))
source("./lib/train.R")
# I use cross-validation within this function to be more efficient
baseline_train_time <- system.time(baseline_model<- train(baseline_features, train_label, 1))
source("./lib/train.R")
# I use cross-validation within this function to be more efficient
baseline_train_time <- system.time(baseline_model<- train(baseline_features, train_label, 1))
warnings()
library(e1071)
install.packages("e1071")
library(e1071)
length(baseline_features)
dim(baseline_features)
length(train_label)
test<- cbind(baseline_features, train_label)
View(test)
View(test[801])
View(test[,801])
colnames(test)
View(test$train_label)
View(test[]$train_label)
View(test[,]$train_label)
View(test[,train_label])
View(test[,"train_label"])
rm(test)
baseline_train_time <- system.time(baseline_model<- train(baseline_features, train_label, 1))
warnings()
source("./lib/train.R")
# I use cross-validation within this function to be more efficient
baseline_train_time <- system.time(baseline_model<- train(baseline_features, train_label, 1))
library(e1071)
source("./lib/train.R")
# I use cross-validation within this function to be more efficient
baseline_train_time <- system.time(baseline_model<- train(baseline_features, train_label, 1))
library(gbm)
install.packages("gbm")
source("./lib/train.R")
test <- train(baseline_features, train_label, 1)
warnings()
View(test)
test
source("./lib/train.R")
str(label_train)
str(train_label)
as.factor(train_label)
baseline_train_time <- system.time(baseline_model<- train(baseline_features, as.factor(train_label), 1))
warnings()
baseline_model
geterrmessage()
geterrmessage()
geterrmessage(,2)
geterrmessage(2)
svmObj$best.parameters$cost
baselinemodel$best.parameters$cost
baseline_model$best.parameters$cost
baseline_model
baseline_train_time <- system.time(baseline_model<- train(baseline_features, as.factor(train_label), 1))
baseline_train_time
baseline_model
source("./lib/train.R")
# I use cross-validation within this function to be more efficient
baseline_train_time <- system.time(baseline_model<- train(baseline_features, as.factor(train_label), 1))
getwd()
source("lib/feature.R")
source("./lib/train.R")
source("./lib/test.R")
baseline_model
img_test_dir <- "../data/test/"
img_test_feature_dir <- "../data/testfeatures/"
baseline_test_feature_time <- system.time(baseline_test_features <- feature(img_test_dir, img_test_feature_dir))
source("lib/feature.R")
baseline_test_feature_time <- system.time(baseline_test_features <- feature(img_test_dir, img_test_feature_dir))
length(baseline_test_features)
dim(baseline_test_features)
source("./lib/test.R")
baseline_predict_time <- system.time(baseline_predictions<-test(baseline_model, baseline_test_features))
source("./lib/test.R")
baseline_predict_time <- system.time(baseline_predictions<-test(baseline_model, baseline_test_features))
baseline_predictions
View(baseline_model)
View(baseline_predictions)
View(test_label)
test_label <- c()
for(i in 1:length(test_file_names)){
if (substring(test_file_names[i], 1, 1) == toupper(substring(test_file_names[1], 1, 1))){
# Cat = 1
test_label <- c(test_label, 1)
} else {
# Dog = 0
test_label <- c(test_label, 0)
}
}
test_file_names <- dir(img_test_dir)
test_label <- c()
for(i in 1:length(test_file_names)){
if (substring(test_file_names[i], 1, 1) == toupper(substring(test_file_names[1], 1, 1))){
# Cat = 1
test_label <- c(test_label, 1)
} else {
# Dog = 0
test_label <- c(test_label, 0)
}
}
length(test_label)
View(test_label)
baseline_results = table(pred = baseline_predictions, true = test_label)
baseline_results
baseline_rate = (baseline_results[2] + baseline_results[3]) / (baseline_results[1] + baseline_results[4] + baseline_results[2] + baseline_results[3])
baseline_rate<-baseline_rate *100
baseline_rate
baseline_results
baseline_results[2]
baseline_results[3]
View(baseline_results)
cat("Time for constructing the baseline training features=", baseline_feature_time[1], "s \n")
cat("Time for constructing the baseline training features=", baseline_train_feature_time[1], "s \n")
cat("Time for constructing the baseline testing features=", baseline_test_feature_time[1], "s \n")
cat("Time for training the baseline linear svm=", baseline_train_time[1], "s \n")
cat("Time for making baseline predictions =", baseline_predict_time[1], "s \n")
detach("package:stringr", unload=TRUE)
detach("package:survival", unload=TRUE)
detach("package:lattice", unload=TRUE)
detach("package:kernlab", unload=TRUE)
detach("package:graphics", unload=TRUE)
detach("package:grDevices", unload=TRUE)
library("graphics", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("grDevices", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:gbm", unload=TRUE)
detach("package:EBImage", unload=TRUE)
detach("package:e1071", unload=TRUE)
detach("package:caret", unload=TRUE)
detach("package:BiocInstaller", unload=TRUE)
library(EBImage)
library(stringr)
setwd("Documents/Spring 2016/DataScience/Project3/cycle3cvd-team9/")
getwd()
img_train_dir <- "../data/train/"
img_test_dir <- "../data/test/"
img_feature_dir <- "../data/features/"
img_test_feature_dir <- "../data/testfeatures/"
file_names <- dir(img_train_dir)
test_file_names <- dir(img_test_dir)
#               Class Labels
#############################################
train_label <- c()
for(i in 1:length(file_names)){
if (substring(file_names[i], 1, 1) == toupper(substring(file_names[1], 1, 1))){
# Cat = 1
train_label <- c(train_label, 1)
} else {
# Dog = 0
train_label <- c(train_label, 0)
}
}
test_label <- c()
for(i in 1:length(test_file_names)){
if (substring(test_file_names[i], 1, 1) == toupper(substring(test_file_names[1], 1, 1))){
# Cat = 1
test_label <- c(test_label, 1)
} else {
# Dog = 0
test_label <- c(test_label, 0)
}
}
View(train_label)
summary(train_label)
summary(test_label)
train_label <- as.factor(train_label)
summary(train_label)
test_label <- as.factor(test_label)
summary(test_label)
source("lib/feature.R")
source("./lib/train.R")
# I use cross-validation within this function to be more efficient
baseline_train_time <- system.time(baseline_model<- train(baseline_features, as.factor(train_label)))
img_train_feature_dir <- "../data/features/"
img_test_feature_dir <- "../data/testfeatures/"
source("lib/feature.R")
baseline_train_feature_time <- system.time(baseline_train_features <- feature(img_train_dir, img_train_feature_dir))
source("lib/feature.R")
# Baseline
baseline_train_feature_time <- system.time(baseline_train_features <- feature(img_train_dir, img_train_feature_dir))
source("lib/feature.R")
# Baseline
baseline_train_feature_time <- system.time(baseline_train_features <- feature(img_train_dir, img_train_feature_dir))
img_train_feature_dir <- "../data/features/"
img_test_feature_dir <- "../data/testfeatures/"
file_names <- dir(img_train_dir)
test_file_names <- dir(img_test_dir)
#               Class Labels
#############################################
train_label <- c()
for(i in 1:length(file_names)){
if (substring(file_names[i], 1, 1) == toupper(substring(file_names[1], 1, 1))){
# Cat = 1
train_label <- c(train_label, 1)
} else {
# Dog = 0
train_label <- c(train_label, 0)
}
}
train_label <- as.factor(train_label)
test_label <- c()
for(i in 1:length(test_file_names)){
if (substring(test_file_names[i], 1, 1) == toupper(substring(test_file_names[1], 1, 1))){
# Cat = 1
test_label <- c(test_label, 1)
} else {
# Dog = 0
test_label <- c(test_label, 0)
}
}
test_label <- as.factor(test_label)
source("lib/feature.R")
# Baseline
baseline_train_feature_time <- system.time(baseline_train_features <- feature(img_train_dir, img_train_feature_dir))
paste0(str_sub(list.files(img_train_dir)[i], 1, -5), ".rds")
paste0(str_sub(list.files(img_train_dir)[1], 1, -5), ".rds")
paste0(str_sub(list.files(img_train_dir)[2], 1, -5), ".rds")
img_train_feature_dir
View(baseline_train_features)
baseline_test_feature_time <- system.time(baseline_test_features <- feature(img_test_dir, img_test_feature_dir))
source("lib/feature.R")
baseline_test_feature_time <- system.time(baseline_test_features <- feature(img_test_dir, img_test_feature_dir))
source("./lib/train.R")
# I use cross-validation within this function to be more efficient
baseline_train_time <- system.time(baseline_model<- train(baseline_train_features, train_label))
source("./lib/test.R")
baseline_predict_time <- system.time(baseline_predictions<-test(baseline_model, baseline_test_features))
baseline_results = table(pred = baseline_predictions, true = test_label)
cat("Time for constructing the baseline training features = ", baseline_train_feature_time[1], "s \n")
cat("Time for constructing the baseline testing features = ", baseline_test_feature_time[1], "s \n")
cat("Time for training the baseline linear svm with color histograms = ", baseline_train_time[1], "s \n")
cat("Time for making baseline predictions = ", baseline_predict_time[1], "s \n")
baseline_results
length("../data/images/")
length(dir("../data/images/"))
